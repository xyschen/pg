## DESCRIPTION
## Domain and range of a function using inequalities
## ENDDESCRIPTION

## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(PGML tutorial 2015)
## Date(06/01/2015)
## Institution(Hope College)
## Author(Paul Pearson)
## MO(1)
## KEYWORDS('algebra', 'domain and range using inequalities')

#:% name = Domain and Range of a Function
#:% type = Sample
#:% subject = [algebra, precalculus]
#:% categories = [domain]

#:% section = preamble
#: The `contextInequalities.pl` macro is used for inequality answers.
DOCUMENT();

loadMacros('PGstandard.pl', 'PGML.pl', 'contextInequalities.pl', 'PGcourse.pl');

#:% section = setup
#: Different contexts can be used for different answers in a problem.
#: Calling Context('Inequalities-Only') creates a new instance of the context.
#: The two contexts in this problem have different variables defined.  The
#: first only has the variable "x", and the second only has the variable "y".
#: Note that calling `->variables->are(x => 'Real')` for the first instance is
#: actually unnecessary since "x" is the only variable in the context by
#: default.  It is only shown here for emphasis.

#: For the first part, the "Inequalities-Only" context is used.  That context
#: requires students to enter their answer using inequalities.  If the
#: "Inequalities" context had been used instead, then students would also be
#: able to enter answers using interval notation. For more details, please see
#: `contextInequalities.pl`.
#:
#: Calling Context('Inequalities-Only') creates a new instance of the context.
#: The first two contexts in this problem have different variables defined.  The
#: first only has the variable "x", and the second only has the variable "y".
#: Note that calling `->variables->are(x => 'Real')` for the first instance is
#: actually unnecessary since "x" is the only variable in the context by
#: default.  It is only shown here for emphasis.
#:
#: Setting the context flag `formatStudentAnswer => 'parsed'` insists that the
#: `parsed` student answers be displayed and no further reduction or evaluation
#: is done.  Generally this means the student answer is displayed much as it is
#: entered.  In particular in this instance it prevents the student's answer
#: from being reduced to a decimal.
#:
#: For the second part, the "Interval" context is used instead.  Change to this
#; context by calling `Context('Interval')`. Note that `inf` is built-in for
#: infinte intervals.
$a = random(1, 6);

Context('Inequalities-Only')->variables->are(x => 'Real');
Context()->flags->set(formatStudentAnswer => 'parsed');

$domain = Compute("x >= $a");

Context('Inequalities-Only')->variables->are(y => 'Real');
Context()->flags->set(formatStudentAnswer => 'parsed');

$range = Compute('y >= 0');

# Interval version of the same domain and range.
Context('Interval');
$domain_interval = Compute("[$a, inf)");
$range_interval  = Compute('[0, inf)');

#:% section = statement
BEGIN_PGML
Suppose [`f(x) = \sqrt(x - [$a])`].

Enter inequalities for the domain and range of [`f`].

Domain: [_]{$domain}{15}

Range: [_]{$range}{15}

Use interval notation to give the domain and range of [`f`].

Domain: [____]{$domain_interval}

Range: [____]{$range_interval}
END_PGML

#:% section = solution
BEGIN_PGML_SOLUTION
Solution explanation goes here.
END_PGML_SOLUTION

ENDDOCUMENT();
